import * as cdk from 'aws-cdk-lib';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import { Construct } from 'constructs';
import { Duration } from 'aws-cdk-lib';

interface ApiStackProps extends cdk.StackProps {
    lambdaFunction: lambda.Function;
}

export class ApiStack extends cdk.Stack {
    constructor(scope: Construct, id: string, props: ApiStackProps) {
        super(scope, id, props);

        const { lambdaFunction } = props;

        // Create API with API key requirement, but without a default deployment
        const api = new apigateway.RestApi(this, 'SustainlyApi', {
            restApiName: 'Sustainly API Dev',
            description: 'API for Sustainly product sustainability services (Development)',
            defaultCorsPreflightOptions: {
                allowOrigins: ['http://localhost:8081', 'https://sustainly-six.vercel.app', 'https://www.sustainly.fyi'], // Specific allowed origins
                allowMethods: apigateway.Cors.ALL_METHODS,
                allowHeaders: ['Content-Type', 'Authorization', 'x-api-key', 'X-Amz-Date', 'X-Api-Key', 'X-Amz-Security-Token'],
                allowCredentials: true,
                maxAge: Duration.seconds(300),
            },
            apiKeySourceType: apigateway.ApiKeySourceType.HEADER,
            deployOptions: {
                // Don't create a default deployment stage
                stageName: undefined,
            },
        });

        // Create API key for development
        const apiKey = new apigateway.ApiKey(this, 'SustainlyDevApiKey', {
            apiKeyName: 'SustainlyApiKey-Dev',
            description: 'API Key for Sustainly API',
            enabled: true,
            // The actual key value will be generated by AWS and should be stored in API_KEYS env var
        });

        // Create usage plan for development
        const usagePlan = new apigateway.UsagePlan(this, 'SustainlyDevUsagePlan', {
            name: 'SustainlyUsagePlan-Dev',
            description: 'Usage plan for Sustainly API',
            apiStages: [
                {
                    api,
                    stage: api.deploymentStage,
                },
            ],
            // Set rate limiting
            throttle: {
                rateLimit: 10, // requests per second
                burstLimit: 20, // maximum number of concurrent requests
            },
            // Set quota if needed
            quota: {
                limit: 1000, // number of requests
                period: apigateway.Period.DAY,
            },
        });

        // Add development API key to usage plan
        usagePlan.addApiKey(apiKey);

        // Configure Lambda integration with increased timeout for development
        const lambdaIntegration = new apigateway.LambdaIntegration(lambdaFunction, {
            timeout: Duration.millis(29000), // Set to maximum allowed timeout (29 seconds)
            proxy: true,
        });

        // Add resources and methods to the API
        const productScoreResource = api.root.addResource('product-score');
        productScoreResource.addMethod('GET', lambdaIntegration, {
            apiKeyRequired: true, // Require API key for this endpoint
        });

        const alternativeProductsResource = api.root.addResource('alternative-products');
        alternativeProductsResource.addMethod('GET', lambdaIntegration, {
            apiKeyRequired: true, // Require API key for this endpoint
        });

        // Add user history endpoints
        const userHistoryResource = api.root.addResource('user-history');
        userHistoryResource.addMethod('GET', lambdaIntegration, {
            apiKeyRequired: true, // Require API key for this endpoint
        });
        userHistoryResource.addMethod('DELETE', lambdaIntegration, {
            apiKeyRequired: true, // Require API key for this endpoint
        });

        // Create a new API deployment and stage with CORS configuration
        const deployment = new apigateway.Deployment(this, 'DevDeployment', {
            api,
            retainDeployments: true,
        });

        // Create the dev stage with specific CORS settings
        const stage = new apigateway.Stage(this, 'dev', {
            deployment,
            stageName: 'dev',
        });
        
        // Configure CORS for the API Gateway
        // We'll use a simpler approach that works with API Gateway
        
        // Add CORS headers to the 4XX and 5XX responses
        // Note: We use the origin from the request via Lambda integration
        // These headers are a fallback for direct API Gateway errors
        new apigateway.GatewayResponse(this, 'Default4XX', {
            type: apigateway.ResponseType.DEFAULT_4XX,
            restApi: api,
            responseHeaders: {
                // Use a variable for origin to match the request origin if it's in the allowed list
                'Access-Control-Allow-Origin': "'*'", // Wildcard for Gateway errors
                'Access-Control-Allow-Headers': "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                'Access-Control-Allow-Methods': "'GET,POST,PUT,DELETE,OPTIONS'",
                'Access-Control-Allow-Credentials': "'true'"
            }
        });
        
        new apigateway.GatewayResponse(this, 'Default5XX', {
            type: apigateway.ResponseType.DEFAULT_5XX,
            restApi: api,
            responseHeaders: {
                // Use a variable for origin to match the request origin if it's in the allowed list
                'Access-Control-Allow-Origin': "'*'", // Wildcard for Gateway errors
                'Access-Control-Allow-Headers': "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                'Access-Control-Allow-Methods': "'GET,POST,PUT,DELETE,OPTIONS'",
                'Access-Control-Allow-Credentials': "'true'"
            }
        });
        
        // Add OPTIONS methods to resources for CORS preflight requests
        const addCorsOptions = (resource: apigateway.IResource) => {
            try {
                resource.addMethod('OPTIONS', new apigateway.MockIntegration({
                    integrationResponses: [{
                        statusCode: '200',
                        responseParameters: {
                            'method.response.header.Access-Control-Allow-Headers': "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                            // Use the Origin header from the request
                            'method.response.header.Access-Control-Allow-Origin': "'*'", // Wildcard for preflight
                            'method.response.header.Access-Control-Allow-Methods': "'GET,POST,PUT,DELETE,OPTIONS'",
                            'method.response.header.Access-Control-Allow-Credentials': "'true'"
                        }
                    }],
                    passthroughBehavior: apigateway.PassthroughBehavior.NEVER,
                    requestTemplates: {
                        'application/json': '{"statusCode": 200}'
                    }
                }), {
                    methodResponses: [{
                        statusCode: '200',
                        responseParameters: {
                            'method.response.header.Access-Control-Allow-Headers': true,
                            'method.response.header.Access-Control-Allow-Methods': true,
                            'method.response.header.Access-Control-Allow-Origin': true,
                            'method.response.header.Access-Control-Allow-Credentials': true
                        }
                    }]
                });
            } catch (e) {
                // If OPTIONS method already exists, we'll skip it
                console.log(`OPTIONS method already exists for resource: ${resource.path}`);
            }
        };
        
        // Only add OPTIONS to the product-score resource since that's what's being used
        addCorsOptions(productScoreResource);

        // Add the stage to the usage plan
        usagePlan.addApiStage({
            stage,
            throttle: [
                {
                    method: api.root.addMethod('ANY'), // This represents all methods
                    throttle: {
                        rateLimit: 10,
                        burstLimit: 20
                    }
                }
            ]
        });

        // Output the API key ID for reference
        new cdk.CfnOutput(this, 'DevApiKeyId', {
            value: apiKey.keyId,
            description: 'API Key ID for Dev stage (retrieve actual key from AWS Console or CLI)',
            exportName: 'SustainlyDevApiKeyId',
        });


    }
}
